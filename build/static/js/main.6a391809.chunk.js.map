{"version":3,"sources":["components/Formulario.jsx","components/Turno.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearTurno","useState","mascota","propietario","fecha","hora","sintomas","turno","actualizarTurno","error","actualizarError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","console","log","id","uuid","type","placeholder","onChange","aria-label","Turno","eliminarTurno","onClick","App","turnosIniciales","JSON","parse","localStorage","getItem","turnos","guardarTurnos","useEffect","setItem","stringify","nuevasTurnos","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6a391809.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport uuid from 'uuid/dist/v4';\n\n\nconst Formulario = ({crearTurno}) => {\n\n// Creamos el state turnos\n// Recordar que es [nombre, función que lo modifica]\n// Inicializamos con un objeto vacío pero definido\n\n    const [turno, actualizarTurno] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n\n// Creamos el state error\n// para validar las entradas del formulario\n\n    const [error, actualizarError] = useState(false);\n\n// Esta handleChange (se acostumbra a poner así, handleLoquevenga) es para\n// leer los datos a medida que el usuario escribe\n// en lo campos del form. Así vamos validando en tiempo real\n\n    const handleChange = e => {\n        actualizarTurno({\n                ...turno,\n                [e.target.name]: e.target.value\n            }\n        )\n    }\n\n// Extraer los valores\n\n    const {mascota, propietario, fecha, hora, sintomas} = turno;\n\n// Cuando se envía el formulario se juega todo esto.\n\n    const submitTurno = e => {\n        e.preventDefault();\n        // Esta prevent es para que no tire error porque al pcipio. están los campos vacíos.\n\n        // Validar\n\n        if (mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas.trim() === \"\") {\n            console.log(\"Tenés que completar todos los campos\");\n            actualizarError(true);\n            return;\n        }\n\n        // Eliminar mensaje error\n        actualizarError(false);\n\n        // Asignar ID\n        turno.id = uuid();\n\n        // Crear Turno\n        crearTurno(turno);\n\n        // Reiniciar el form\n        actualizarTurno({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        })\n    }\n\n\n    return (\n        <Fragment>\n            <h2 className={\"font-bold text-black\"}>Crear turno</h2>\n\n            {error ? <p className=\"text-red-700 px-4 py-3\"> Tenés que completar todos los campos </p> : null}\n\n            <div className={\"container rounded px-2\"}>\n                <form onSubmit={submitTurno} className={\"\"}>\n                    <div className={\"mb-4 px-2\"}>\n                        <label>Nombre mascota</label>\n                        <input\n                            type=\"text\"\n                            name=\"mascota\"\n                            value={mascota}\n                            placeholder=\"Nombre de la mascota\"\n                            className={\"shadow appearance-none rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border border-transparent focus:ring-2 focus:ring-purple-600 focus:border-transparent\"}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    <div className={\"mb-4 px-2\"}>\n                        <label>Nombre dueño</label>\n                        <input\n                            type=\"text\"\n                            name=\"propietario\"\n                            value={propietario}\n                            placeholder=\"Nombre del dueño\"\n                            className={\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border border-transparent focus:ring-2 focus:ring-purple-600 focus:border-transparent\"}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    <div className={\"mb-4 px-2\"}>\n                        <label>Fecha de la consulta</label>\n                        <input\n                            type=\"date\"\n                            name=\"fecha\"\n                            value={fecha}\n                            className={\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border border-transparent focus:ring-2 focus:ring-purple-600 focus:border-transparent\"}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    <div className={\"mb-4 px-2\"}>\n                        <label>Hora de la consulta</label>\n                        <input\n                            type=\"time\"\n                            name=\"hora\"\n                            value={hora}\n                            className={\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border border-transparent focus:ring-2 focus:ring-purple-600 focus:border-transparent\"}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    <div className={\"mb-4 px-2\"}>\n                        <label>Síntomas</label>\n                        <textarea\n                            className={\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border border-transparent focus:ring-2 focus:ring-purple-600 focus:border-transparent\"}\n                            aria-label=\"With textarea\"\n                            name=\"sintomas\"\n                            value={sintomas}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    <div className={\"mb-4 px-2\"}>\n                        <button\n                            type=\"submit\"\n                            className={\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline border border-transparent focus:ring-2 focus:ring-purple-600 focus:border-transparent\"}>\n                            AGREGAR TURNO\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Formulario;","import React from 'react'\n\nconst Turno = ({turno, eliminarTurno}) => (\n    <tr className=\"bg-purple-100 border border-purple-500\">\n        <td className={\"border border-purple-500 px-4\"}><span>{turno.mascota}</span></td>\n        <td className={\"border border-purple-500 px-4\"}><span>{turno.propietario}</span></td>\n        <td className={\"border border-purple-500 px-4\"}><span>{turno.fecha}</span></td>\n        <td className={\"border border-purple-500 px-4\"}><span>{turno.hora}</span></td>\n        <td className={\"border border-purple-500 px-4\"}><span>{turno.sintomas}</span></td>\n        <button\n            type=\"button\"\n            className={\"m-4 border border-red-500 hover:bg-red-200 text-red-500 font-bold px-2 rounded-full focus:outline-none focus:shadow-outline\"}\n            onClick={() => eliminarTurno(turno.id)}>&times;</button>\n    </tr>\n);\nexport default Turno;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Turno from './components/Turno';\n\n\nfunction App() {\n\n// Turnos en local storage\n    let turnosIniciales = JSON.parse(localStorage.getItem(\"turnos\"));\n    if (!turnosIniciales) {\n        turnosIniciales = [];\n    }\n\n// Array de turnos\n    const [turnos, guardarTurnos] = useState(turnosIniciales);\n\n// Usamos useEffect para activar cuando cambia el state de turnos\n    useEffect(() => {\n        let turnosIniciales = JSON.parse(localStorage.getItem(\"turnos\"));\n        if (turnosIniciales) {\n            localStorage.setItem('turnos', JSON.stringify(turnos))\n        } else {\n            localStorage.setItem('turnos', JSON.stringify([]));\n        }\n    }, [turnos]);\n\n// Función que toma las turnos actuales y agrega los nuevos\n// recordar los ... del ejercicio anterior.\n\n\n    const crearTurno = turno => {\n        guardarTurnos([...turnos, turno]);\n    }\n\n// Función que elimina las turnos según el id\n// también es parecido al carrito de compras.\n\n    const eliminarTurno = id => {\n        const nuevasTurnos = turnos.filter(turno => turno.id !== id);\n        guardarTurnos(nuevasTurnos);\n    }\n\n// Mensaje condicional\n// recordar el ternario que reemplaza al \"if\"\n\n    const titulo = turnos.length === 0 ? 'No hay turnos' : 'Listado de turnos';\n\n    return (\n        <Fragment>\n            <h1 className={\"font-bold text-xl\"}>Veterinaria 420 Pa los Perros - Administrador de turnos</h1>\n            <div className={\"flex flex-wrap\"}>\n                <div className={\"h-1/3 w-1/3 mx-auto px-4 my-4 bg-gray-100 rounded-lg shadow-lg min-w-min\"}>\n                    <Formulario\n                        crearTurno={crearTurno}\n                    />\n                </div>\n                <div className={\"w-1/2 mx-auto px-4 my-4 bg-gray-100 rounded-lg shadow-lg min-w-min\"}>\n                    <h2 className={\"font-bold text-black\"}>{titulo}</h2><br/>\n                    {turnos.length > 0 ? <table className={\"table-auto text-left rounded-lg mx-auto\"}>\n                        <thead>\n                            <tr className={\"text-purple-500\"}>\n                                <th className={\"px-2\"}>Mascota</th>\n                                <th className={\"px-2\"}>Propietario</th>\n                                <th className={\"px-2 w-1/6\"}>Fecha</th>\n                                <th className={\"px-2\"}>Hora</th>\n                                <th className={\"px-2\"}>Sintomas</th>\n                            </tr>\n                        </thead>\n                        <tbody className={\"\"}>\n                        {turnos.map(turno => (\n                            <Turno\n                                key={turno.id}\n                                turno={turno}\n                                eliminarTurno={eliminarTurno}\n                            />\n                        ))}\n                        </tbody>\n                    </table> : null}\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}